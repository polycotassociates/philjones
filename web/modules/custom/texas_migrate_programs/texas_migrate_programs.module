<?php

/**
 * @file
 * Contains texas_migrate_programs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\migrate\Row;
use Drupal\migrate\MigrateMessageInterface;
use Drupal\migrate\MigrateMessage;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Event\MigrateEvents;
use Drupal\migrate_plus\Entity\Migration;
use Drupal\migrate_plus\Entity\MigrationGroup;
use Drupal\migrate_plus\Plugin\MigrationConfigEntityPluginManager;
use Drupal\migrate_tools\MigrateExecutable;
use Drupal\migrate_tools\MigrateTools;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function texas_migrate_programs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the texas_migrate_programs module.
    case 'help.page.texas_migrate_programs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Migrates survey responses from Qualtrics to create/update users and nodes for program data') . '</p>';
      return $output;

    default:
  }
}


/**
 * Downloads survey results from qualtrics().
 */
function texas_migrate_programs_runner(){
// get settings
  $config = \Drupal::config("texas_migrate_programs.credentials");
  $settings = array();
  $settings["api_token"] = $config->get("api_token");
  $settings["data_center"] = $config->get("data_center");
  $settings["survey_id"] = $config->get("survey_id");
  $surveys = explode("|", $settings["survey_id"]);
  $path = '/app/private/qualtrics_data';
  $survey ="";
  $textout = "";
  $index = 0;
  $textout = $textout ."<ul>";
  // for loop disabled since there is only one survey being downloaded
  //foreach($surveys as $survey) {
    //$textout = $textout . "<li><strong>Survey index</strong> is " .$index. "</li><ul>";
    //$textout = $textout . "<li><strong>Survey ID:</strong> ". $surveys[$index]. "</li>";
    //$textout = $textout . "<li><strong>File Path</strong> is ". $path. "</li>";


    $textout = $textout . texas_migrate_programs_qualtrics($settings, $surveys[$index]);
    //$textout = $textout . texas_migrate_programs_importer();
    $index++;
  //}
  $textout = $textout ."</ul>";
 return $textout;
}

/**
 * Downloads survey results from qualtrics().
 */
function texas_migrate_programs_qualtrics($settings, $surveyid){
  $path = '/app/private/qualtrics_data';
  $progressid = "";
  $progresspercentcomplete = "";
  $fileid = "";
  $filepercentcomplete = "";
  $filedownload = "";
  $unzip = "";
  $textout = "";

//get a session ID
  $curl = curl_init();

  curl_setopt_array($curl, array(
    CURLOPT_URL => "https://".$settings["data_center"].".qualtrics.com/API/v3/surveys/".$surveyid."/export-responses",
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 0,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => "POST",
    CURLOPT_POSTFIELDS =>"{\n\t\"format\": \"json\"\n}",
    CURLOPT_HTTPHEADER => array(
      "X-API-TOKEN: ".$settings['api_token'],
      "Content-Type: application/json"
    ),
  ));

  $progressid = curl_exec($curl);
  //uncomment to debug $progressid
  //$textout =  $textout . "<li><strong>Session lookup</strong> is " . $progressid . "</li>";
  curl_close($curl);
  $progressid = json_decode($progressid);
    //get percent complete for session build
    $progresspercentcomplete = $progressid->result->percentComplete;
    if (!empty($progressid->result->progressId)){
    $progressid =  $progressid->result->progressId;
    //$textout =  $textout . "<li><strong>progressId:</strong> " . $progressid . "</li>";
    }else{
      // this exits because the Qulatrics credentials aren't valid
      $textout =  $textout . "<li><a class='btn btn-info' role='button' href='/admin/config/services/qualtrics-settings'><strong>Please check to make sure your Qualtrics API key, data center and Survey ID are valid.</strong></a></li>";
    }
//wait for file to build
sleep(10);
// get a file ID
  $curl = curl_init();

  curl_setopt_array($curl, array(
    CURLOPT_URL => "https://".$settings["data_center"].".qualtrics.com/API/v3/surveys/".$surveyid."/export-responses/".$progressid,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 0,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => "GET",
    CURLOPT_HTTPHEADER => array(
      "X-API-TOKEN: ".$settings['api_token'],
      "Content-Type: application/json"
    ),
  ));

  $fileid = curl_exec($curl);
  //uncomment to debug file build
  //$textout =  $textout . "<li><strong>File lookup:</strong> " . $fileid . "</li>";
  curl_close($curl);
  $fileid = json_decode($fileid);
    //get percent complete for requested file build
    $filepercentcomplete = $fileid->result->percentComplete;
    //$textout =  $textout . "<li>File build is <strong>" . $filepercentcomplete . "%</strong> complete</li>";
    //report percent completed
    if ($filepercentcomplete == 100){
      $fileid =  $fileid->result->fileId;
      //$textout =  $textout . "<li><strong>fileId  is: </strong>" . $fileid . "</li>";
    }else{
      //$textout =  $textout . "<li><strong><div class = 'error'>File is ".$filepercentcomplete."% complete !</div></strong></li>";
      //exit;
    }
  //only try to download if file build is 100 percent complete
  if ($filepercentcomplete == 100) {
// download and save the .zip file
// file to save the contents to

    //$textout =  $textout . "<li><strong>File Path is: </strong>/app/private/qualtrics_data/".$surveyid.".zip</li>";
    $fp = fopen("/app/private/qualtrics_data/".$surveyid.".zip", "wb");
    //$datap = file_get_contents($path.'/'.$surveyid.'.zip');
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => "https://".$settings["data_center"].".qualtrics.com/API/v3/surveys/".$surveyid."/export-responses/".$fileid."/file",
      CURLOPT_FILE => $fp,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_ENCODING => "",
      CURLOPT_MAXREDIRS => 10,
      CURLOPT_TIMEOUT => 0,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
      CURLOPT_CUSTOMREQUEST => "GET",
      CURLOPT_HTTPHEADER => array(
        "X-API-TOKEN: ".$settings['api_token'],
        "Content-Type: application/json"
      ),
    ));

    $filedownload = curl_exec($curl);
      if (!empty($filedownload)){
        fwrite($fp, $filedownload);
        file_save_data($filedownload, 'private://qualtrics_data/'.$surveyid.'.zip', FILE_EXISTS_REPLACE);

        $textout =  $textout . "<li>downloaded <strong>".$surveyid.".zip</strong></li>";
        //$textout = $textout . "<li><strong>File Path</strong> is ".$path."</strong></li>";

      }else{
        $textout =  $textout . "<li><strong>File Download failed !</strong></li>";
      }

    curl_close($curl);
    //fclose($fp);
    $unzip = texas_migrate_programs_unzip($surveyid);
  }
  //texas_migrate_programs_rename();
  $content = $textout;
  $content = $content . $unzip;
  return $content;

}


/**
 * Unzips and renames file downloaded from qualtrics().
 */
function texas_migrate_programs_unzip($surveyid){

// unzip path
//$path = drupal_realpath('private://qualtrics_data/');
$path = '/app/private/qualtrics_data';
// zip file name
$filename = $path."/".$surveyid.'.zip';
// do the business
$zip = new ZipArchive;
$res = $zip->open($filename);
  if ($res === TRUE) {
  // get file name, only one name
   $oldname = $zip->getNameIndex(0);
  // rename file
   $zip->renameName($oldname, $surveyid.'.json');
   $zip->close();
   $textout = '<li>unzipped <strong>'.$surveyid.'.zip</strong></li>';
   $textout = $textout .  '<li>renamed <strong>'.$oldname.'</strong></li>';
  } else {
   $textout = '<li><strong>Rename failed !</strong><li>';
  }
$res = $zip->open($filename);
  if ($res === TRUE) {
   // extract file
   $zip->extractTo($path);
   $zip->close();

   $textout = $textout . '<li><strong>'.$surveyid.'.json</strong> is ready.</li>';
  } else {
   $textout = $textout . '<li><strong>Unzip failed !</strong></li>';
  }

return $textout;

}

/**
 * programmatically runs migrations to import users, data nodes, and timepoint paragraphs for the various programs ().
 */
function texas_migrate_programs_importer(){
// get settings
  //$config = \Drupal::config("texas_migrate_programs.credentials");
  //$settings = array();
  //$settings["survey_id"] = $config->get("survey_id");
  //$surveys = explode("|", $settings["survey_id"]);
  $migrations  = 'texas_a_user,texas_cwwd_timepoint_12W,texas_cwwd_timepoint_baseline,texas_cwwd,texas_dep_f_timepoint_48W,texas_dep_f_timepoint_36W,texas_dep_f_timepoint_24W,texas_dep_f_timepoint_12W,texas_dep_f_timepoint_baseline,texas_dep_f,texas_map_timepoint_12W,texas_map_timepoint_baseline,texas_map,texas_susd_f_timepoint_48W,texas_susd_f_timepoint_36W,texas_susd_f_timepoint_24W,texas_susd_f_timepoint_12W,texas_susd_f_timepoint_baseline,texas_susd_f,texas_wat_timepoint_12W,texas_wat_timepoint_baseline,texas_wat';
  $migrations = explode(',', $migrations);
  $manager = Drupal::service('plugin.manager.migration');
  $textout = '';
  $index = 0;
  foreach($migrations as $migration) {
    $migration = $manager->createInstance($migration);
    // update existing entity imported.
    //$migration->getIdMap()->prepareUpdate();
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    try {
      // Run the migration.
      $executable->import();
      $textout = $textout . '<li><strong>'. $migrations[$index] .'</strong> imported.</li>';
    }
    catch (\Exception $e) {
      $migration->setStatus(MigrationInterface::STATUS_IDLE);
      $textout = $textout . '<li>'. $migrations[$index]  .' import failed !</strong></li>';
    }
    $index++;
  }
 return $textout;
}


/**
 * programmatically runs migrations to import data nodes, and timepoint paragraphs for the various programs dor a specific user ().
 */
function texas_migrate_programs_import_responseid($responseids){

  if ($responseids == 'ResponseId') {
    $textout = 'Please provide a valid single ResponseId or comma seaprated list of ResponseIds.';
    }else{
    $migrations  = 'texas_a_user,texas_cwwd_timepoint_12W,texas_cwwd_timepoint_baseline,texas_cwwd,texas_dep_f_timepoint_48W,texas_dep_f_timepoint_36W,texas_dep_f_timepoint_24W,texas_dep_f_timepoint_12W,texas_dep_f_timepoint_baseline,texas_dep_f,texas_map_timepoint_12W,texas_map_timepoint_baseline,texas_map,texas_susd_f_timepoint_48W,texas_susd_f_timepoint_36W,texas_susd_f_timepoint_24W,texas_susd_f_timepoint_12W,texas_susd_f_timepoint_baseline,texas_susd_f,texas_wat_timepoint_12W,texas_wat_timepoint_baseline,texas_wat';
    $migrations = explode(',', $migrations);
    $manager = Drupal::service('plugin.manager.migration');
    $textout = '';
    $index = 0;
    foreach($migrations as $migration) {
      $migration = $manager->createInstance($migration);
      // uncomment to update existing entity imported, which was previously skipped.
     // $migration->getIdMap()->prepareUpdate();
      $executable = new MigrateExecutable($migration, new MigrateMessage(),
          [
      'idlist' => $responseids,
      //'group' => 'texas_'.$program,
    ]
    );
      try {
        // Run the migration.
        $executable->import();
        $textout = $textout . '<li>Processed <strong>'. $migrations[$index] .'</strong> for ResponseId(s): <strong>'. $responseids .'</strong></li>';
      }
      catch (\Exception $e) {
        $migration->setStatus(MigrationInterface::STATUS_IDLE);
        $textout = $textout . '<li>'. $migrations[$index]  .' import failed !</strong></li>';
      }
      $index++;
    }
  }
 return $textout;
}


/**
 * programmatically runs migrations to import data nodes, and timepoint paragraphs for a single program for a specific user identofied by intake form response id().
 */
function texas_migrate_programs_update_responseid($program,$responseids){
  $migrations  = '';
  if ($responseids == 'ResponseId') {
    $textout = 'Please provide a valid ResponseId.';
    }else{
    // TODOTODO change this to work with migration groups
    if ($program == 'cwwd') {
    $migrations  = 'texas_cwwd_timepoint_12W,texas_cwwd_timepoint_baseline,texas_cwwd';
    }elseif ($program == 'dep_f') {
    $migrations  = 'texas_dep_f_timepoint_48W,texas_dep_f_timepoint_36W,texas_dep_f_timepoint_24W,texas_dep_f_timepoint_12W,texas_dep_f_timepoint_baseline,texas_dep_f';
    }elseif ($program == 'map') {
    $migrations  = 'texas_map_timepoint_12W,texas_map_timepoint_baseline,texas_map';
    }elseif ($program == 'susd_f') {
    $migrations  = 'texas_susd_f_timepoint_48W,texas_susd_f_timepoint_36W,texas_susd_f_timepoint_24W,texas_susd_f_timepoint_12W,texas_susd_f_timepoint_baseline,texas_susd_f';
    }elseif ($program == 'wat') {
    $migrations  = 'texas_wat_timepoint_12W,texas_wat_timepoint_baseline,texas_wat';
    }
    if (!empty($migrations)){
    $migrations = explode(',', $migrations);
    $manager = Drupal::service('plugin.manager.migration');
    $textout = '<li>Program = <strong>'.$program.'</strong></li>';
    $index = 0;
    foreach($migrations as $migration) {
      $migration = $manager->createInstance($migration);
      // update existing entity imported, which was previously skipped.
      $migration->getIdMap()->prepareUpdate();
      $executable = new MigrateExecutable($migration, new MigrateMessage(),
          [
      'idlist' => $responseids,
      //'group' => 'texas_'.$program,
    ]
    );
      try {
        // Run the migration.
        $executable->import();
        $textout = $textout . '<li>Updated <strong>'. $migrations[$index] .'</strong> for ResponseId(s):<br/><ul><li><strong>'. $responseids .'</strong></li></ul></li>';
      }
      catch (\Exception $e) {
        $migration->setStatus(MigrationInterface::STATUS_IDLE);
        $textout = $textout . '<li>'. $migrations[$index]  .' import failed !</strong></li>';
      }
      $index++;
    }
  }else{
    $textout = $textout .'Please provide a valid program ID (eg. cwwd).';
  }
  }
 return $textout;
}

/**
 * programmatically runs migrations to import data nodes, and timepoint paragraphs a single program for a specific user identified by pptid.  provides program start date via embedded data ().
 */
function texas_migrate_programs_add_program_pptid($pid){
  //TODO TODO add check for existing data for program being added.
  $migrations  = '';
  $paragraph = Paragraph::load($pid);
    $startdate = $paragraph->get('field_start_date')->value;
    $program = \Drupal\taxonomy\Entity\Term::load($paragraph->field_program_referred->target_id);
    $program = strtolower($program->get('field_role')->value);
    $uid = $paragraph->get('parent_id')->value;
    // get user id, full name from user
    $user = User::load($uid);
    $name = $user->get('field_displa')->value;
    $pptid = $user->get('field_response_id')->value;
    // get response id from user migration map
    $query = \Drupal::database()->select('migrate_map_texas_a_user', 'm');
    $query->addField('m', 'sourceid1');
    $query->condition('m.destid1', $uid);
    $query->range(0, 1);
    $responseid = $query->execute()->fetchField();

    //dpm($uid);
    //dpm($startdate);
    //dpm($program);

    $data = [
      ['responseId' => $responseid, 'field_response_id' => $pptid, 'field_participant_id' => $pptid, 'name' => $name, 'field_program_type' => $startdate, 'field_start_date' => $startdate, 'program' => $program, 'pptid' => $pptid],
      ];
   //dpm($data[0]['responseId']);
  if (empty($data[0]['pptid'])) {
    $textout = 'Please provide a valid PPTID.';
    }else{
    // TODOTODO change this to work with migration groups
    if ($data[0]['program'] == 'cwwd') {
    $migrations  = 'texas_cwwd_timepoint_12W,texas_cwwd_timepoint_baseline,texas_cwwd';
    }elseif ($data[0]['program'] == 'dep-f') {
    $migrations  = 'texas_dep_f_timepoint_48W,texas_dep_f_timepoint_36W,texas_dep_f_timepoint_24W,texas_dep_f_timepoint_12W,texas_dep_f_timepoint_baseline,texas_dep_f';
    }elseif ($data[0]['program'] == 'map') {
    $migrations  = 'texas_map_timepoint_12W,texas_map_timepoint_baseline,texas_map';
    }elseif ($data[0]['program'] == 'susd-f') {
    $migrations  = 'texas_susd_f_timepoint_48W,texas_susd_f_timepoint_36W,texas_susd_f_timepoint_24W,texas_susd_f_timepoint_12W,texas_susd_f_timepoint_baseline,texas_susd_f';
    }elseif ($data[0]['program'] == 'wat') {
    $migrations  = 'texas_wat_timepoint_12W,texas_wat_timepoint_baseline,texas_wat';
    }
    if (!empty($migrations)){
    $migrations = explode(',', $migrations);
    $manager = Drupal::service('plugin.manager.migration');
    $textout = '<li>Participant: <strong>'. $data[0]['name'] .' - '. $data[0]['pptid'] .'</strong>';
    $index = 0;
    // execute a migration with a data array
    foreach($migrations as $migration) {
      $migration = $manager->createInstance($migration, [
        'source' => [
          'plugin' => 'embedded_data',
          'data_rows' => $data,
         ],
      ]);
      // update existing entity imported, which was previously skipped.
      $migration->getIdMap()->prepareUpdate();
      $executable = new MigrateExecutable($migration, new MigrateMessage(),
          [
      'idlist' => $data[0]['responseId'],
      //'group' => 'texas_'.$data['program'],
      //
    ]
    );
      try {
        // Run the migration.
        $executable->import();
        $textout = $textout . '<li>Added <strong>'. $migrations[$index] .'</strong></li>';
      }
      catch (\Exception $e) {
        $migration->setStatus(MigrationInterface::STATUS_IDLE);
        $textout = $textout . '<li>'. $migrations[$index]  .' import failed !</strong></li>';
      }
      $index++;
    }
  }else{
    $textout = $textout .'Please provide a valid program ID (eg. cwwd).';
  }
  }
  // return $textout for debug info
  //return $textout;
 return $uid;
}


/**
 * Implements hook_theme().
 */
function texas_migrate_programs_theme() {
  return [
    'default_block' => [
      'variables' => [
        'content' => NULL
      ],
      'render element' => 'children',
    ],
  ];
}
